template:
  - sensor:
      - name: "Solar Power (with efficiency loss)"
        unique_id: input_power_with_efficiency_loss_kW
        unit_of_measurement: "kW"
        device_class: power
        state_class: measurement
        state: >-
          {% set inverter_rating = 10000 %}  {# W #}
          {% set inpower = states('sensor.inverter_input_power') | float(0) %}

          {% if inpower < (inverter_rating * 0.1) %}
              {{ (inpower * 0.90 / 1000) | round(2) }}
          {% elif inpower < (inverter_rating * 0.2) %}
              {{ (inpower * 0.95 / 1000) | round(2) }}
          {% else %}
              {{ (inpower * 0.98 / 1000) | round(2) }}
          {% endif %}


      - name: "House Power"
        unique_id: house_power
        unit_of_measurement: "kW"
        state: >
          {% set net_power = states('sensor.power_meter_active_power') | float(0) %}
          {% set import = -net_power if net_power < 0 else 0 %}
          {% set export = net_power if net_power > 0 else 0 %}

          {% set ev_sensor_id = states('input_text.ev_sensor') %}
          {% set ev_raw = states(ev_sensor_id) | float(0) if ev_sensor_id else 0 %}
          {% set ev = ev_raw / 1000 if ev_raw > 100 else ev_raw %}

          {# Use solar sensor from above #}
          {% set solar = states('sensor.input_power_with_efficiency_loss_kW') | float(0) %}

          {% set batt = states('sensor.batteries_charge_discharge_power') | float(0) %}
          {% set batt_out = -batt if batt < 0 else 0 %}
          {% set batt_in = batt if batt > 0 else 0 %}

          {% set house_power = (solar + import + batt_out) - (export + ev + batt_in) %}

          {{ [house_power, 0] | max | round(2) }}

      
      - name: "battery_dynamic_charge_time"
        unit_of_measurement: "h"
        state: >
          {%- set capacity = states('input_number.battery_total_capacity_kwh') | float(0) -%}
          {%- set charge_power_w = states('number.batteries_maximum_charging_power') | float(0) -%}
          {%- set charge_power_kw = charge_power_w / 1000 -%}
          {%- set required_hours = (capacity / charge_power_kw) | round(1) -%}
          {{ required_hours }}

  - trigger:
    - trigger: state
      entity_id: input_button.update_battery_cheapest_charge
    sensor:
    - name: "battery_charge_window_cheapest_1a"
      state: >
        {%- set duration = states('sensor.battery_dynamic_charge_time') | float(0) %}
        {%- set duration_quarters = (duration * 4) | int %}
        {%- set nordpool_sensor_id = states('input_text.nordpool_sensor') %}
        {%- set prices_today = state_attr(nordpool_sensor_id, 'raw_today') if nordpool_sensor_id else None %}

        {%- if duration >= 1 and prices_today is not none and prices_today | length >= (16*4) %}
          {%- set ns = namespace(min_avg=None, start_index=None) %}
          {%- set start_index = 14*4 %}
          {%- set end_index = (16*4) - duration_quarters %}
          {%- for i in range(start_index, end_index + 1) %}
            {%- set slice = prices_today[i:i + duration_quarters] %}
            {%- if slice | length == duration_quarters %}
              {%- set values = slice | map(attribute='value') | list %}
              {%- set avg = (values | sum) / duration_quarters %}
              {%- if ns.min_avg is none or avg < ns.min_avg %}
                {%- set ns.min_avg = avg %}
                {%- set ns.start_index = i %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {%- if ns.start_index is not none %}
            {%- set start_time = (now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(minutes=ns.start_index*15)).astimezone() %}
            {%- set end_time = start_time + timedelta(minutes=duration_quarters*15) %}
            {{ start_time.isoformat() ~ ' - ' ~ end_time.isoformat() }}
          {%- else %}
            unavailable
          {%- endif %}
        {%- else %}
          unavailable
        {%- endif %}

  - trigger:
    - trigger: state
      entity_id: input_button.update_battery_cheapest_charge
    sensor:
    - name: "battery_charge_window_cheapest_1b"
      state: >
        {%- set duration = states('sensor.battery_dynamic_charge_time') | float(0) %}
        {%- set numberOfSequentialQuarters = (duration * 4) | int %}
        {%- set nordpool_sensor_id = states('input_text.nordpool_sensor') %}
        {%- set prices_tomorrow = state_attr(nordpool_sensor_id, 'raw_tomorrow') or [] %}
        {%- set ns = namespace(min_avg=None, start_index=0) %}

        {# Filter: 11:00–14:00 imorgon #}
        {%- set filtered_prices = prices_tomorrow
            | selectattr('start','>=', (today_at("11:00") + timedelta(days=1)))
            | selectattr('end','<=', (today_at("14:00") + timedelta(days=1)))
            | list %}

        {%- for i in range(0, filtered_prices | length - numberOfSequentialQuarters + 1) %}
          {%- set slice = filtered_prices[i:i + numberOfSequentialQuarters] %}
          {%- set avg = (slice | map(attribute='value') | list | sum) / numberOfSequentialQuarters %}
          {%- if ns.min_avg is none or avg < ns.min_avg %}
            {%- set ns.min_avg = avg %}
            {%- set ns.start_index = i %}
          {%- endif %}
        {%- endfor %}

        {%- if (filtered_prices | count) >= (ns.start_index + numberOfSequentialQuarters) %}
          {%- set start_obj = filtered_prices[ns.start_index] %}
          {%- set end_obj = filtered_prices[ns.start_index + numberOfSequentialQuarters - 1] %}
          {%- if as_datetime(end_obj.end).hour > 14 %}
            Inget lämpligt intervall hittades.
          {%- else %}
            {%- set start_str = (start_obj.start | as_local).strftime('%Y-%m-%dT%H:%M:%S%z') %}
            {%- set end_str = (end_obj.end | as_local).strftime('%Y-%m-%dT%H:%M:%S%z') %}
            {{ start_str[:-2] ~ ':' ~ start_str[-2:] }} - {{ end_str[:-2] ~ ':' ~ end_str[-2:] }}
          {%- endif %}
        {%- else %}
          Inget lämpligt intervall hittades.
        {%- endif %}

  - trigger:
    - trigger: state
      entity_id: input_button.update_battery_cheapest_charge
    sensor:
    - name: "battery_charge_window_cheapest_2"
      state: >
        {%- set duration = states('sensor.battery_dynamic_charge_time') | float(0) %}
        {%- set numberOfSequentialQuarters = (duration * 4) | int %}
        {%- set nordpool_sensor_id = states('input_text.nordpool_sensor') %}
        {%- set prices_today = state_attr(nordpool_sensor_id, 'raw_today') or [] %}
        {%- set prices_tomorrow = state_attr(nordpool_sensor_id, 'raw_tomorrow') or [] %}
        {%- set ns = namespace(min_avg=None, start_index=0) %}

        {# Ta priser från idag från kl 23:00 (23*4 = 92) #}
        {%- set prices_today_filtered = prices_today[92:] %}

        {# Ta morgondagens priser upp till kl 05:00 (6h*4 = 24 kvart) #}
        {%- set prices_tomorrow_filtered = prices_tomorrow[0:24] %}

        {# Kombinera listorna #}
        {%- set combined_prices = prices_today_filtered + prices_tomorrow_filtered %}

        {# Sök billigaste intervall #}
        {%- for i in range(0, combined_prices | length - numberOfSequentialQuarters + 1) %}
          {%- set slice = combined_prices[i:i + numberOfSequentialQuarters] %}
          {%- set avg = (slice | map(attribute='value') | list | sum) / numberOfSequentialQuarters %}
          {%- if ns.min_avg is none or avg < ns.min_avg %}
            {%- set ns.min_avg = avg %}
            {%- set ns.start_index = i %}
          {%- endif %}
        {%- endfor %}

        {%- if combined_prices | length >= numberOfSequentialQuarters and ns.start_index + numberOfSequentialQuarters - 1 < combined_prices | length %}
          {%- set start_obj = combined_prices[ns.start_index] %}
          {%- set end_obj = combined_prices[ns.start_index + numberOfSequentialQuarters - 1] %}

          {# Konvertera till ISO-format med kolon i tidszonen #}
          {%- set start_str = (start_obj.start | as_local).strftime('%Y-%m-%dT%H:%M:%S%z') %}
          {%- set end_str = (end_obj.end | as_local).strftime('%Y-%m-%dT%H:%M:%S%z') %}

          {{ start_str[:-2] ~ ':' ~ start_str[-2:] }} - {{ end_str[:-2] ~ ':' ~ end_str[-2:] }}
        {%- else %}
          Ingen giltigt intervall hittades
        {%- endif %}

